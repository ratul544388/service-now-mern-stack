// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  imageUrl  String?
  password  String?
  role      Role      @default(USER)
  accounts  Account[]
  createdAt DateTime  @default(now())
  services  Service[]
  bookings  Booking[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Role {
  USER
  ADMIN
}

model Service {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  description String
  price       Float
  imageUrl    String
  category    String
  address     String
  createdAt   DateTime  @default(now())
  provider    User      @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId  String    @db.ObjectId
  bookings    Booking[]
}

model Booking {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String        @db.ObjectId
  service           Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId         String        @db.ObjectId
  status            BookingStatus @default(PENDING)
  address           String
  serviceTakingDate DateTime
  createdAt         DateTime      @default(now())
}

enum BookingStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
